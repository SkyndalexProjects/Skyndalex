import { HfInference } from "@huggingface/inference";
import {
	ActionRowBuilder,
	AttachmentBuilder,
	ButtonBuilder,
	ButtonStyle,
	EmbedBuilder,
	SlashCommandBuilder,
} from "discord.js";

const hf = new HfInference(process.env.HF_TOKEN);

export async function run(client, interaction) {
	const prompt = interaction.options.getString("input");

	await interaction.deferReply();

	try {
		const result = await hf.textGeneration({
			model: "google/gemma-7b-it",
			inputs: prompt,
		});

		if (!result.generated_text)
			return interaction.editReply(
				"An error occurred while generating text (Probably model time out)",
			);

		const continueButton = new ButtonBuilder()
			.setCustomId("continue")
			.setLabel("Continue")
			.setStyle(ButtonStyle.Primary);

		const row = new ActionRowBuilder().addComponents(continueButton);

		const generatedText = result.generated_text;

		if (generatedText.length > 2000)
			return interaction.editReply({
				content: "The generated text is too long to send",
				embeds: [],
			});

		const embed = new EmbedBuilder()
			.setDescription(generatedText)
			.setColor("#00ff00")
			.setFooter({ text: `Generated by AI â€¢ Prompt: ${prompt}` });

		return interaction.editReply({ embeds: [embed], components: [row] });
	} catch (e) {
		console.error(e);
		await interaction.editReply(
			"An error occurred while generating text (Probably model time out)",
		);
	}
}

export const data = {
	...new SlashCommandBuilder()
		.setName("gentext")
		.setDescription("Generate text")
		.addStringOption((option) =>
			option
				.setName("input")
				.setDescription("Input for the AI")
				.setMaxLength(2000)
				.setMinLength(1)
				.setRequired(true),
		),
	integration_types: [0, 1],
	contexts: [0, 1, 2],
};
