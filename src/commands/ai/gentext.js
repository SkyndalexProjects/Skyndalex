import { HfInference } from "@huggingface/inference";
import {
  ActionRowBuilder,
  AttachmentBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  SlashCommandBuilder,
} from "discord.js";

const hf = new HfInference(process.env.HF_TOKEN);

export default {
  data: {
    ...new SlashCommandBuilder()
      .setName("gentext")
      .setDescription("Generate text")
      .addStringOption((option) =>
        option
          .setName("input")
          .setDescription("Input for the AI")
          .setMaxLength(2000)
          .setMinLength(1)
          .setRequired(true),
      ),
    integration_types: [0, 1],
    contexts: [0, 1, 2],
  },

  async execute(client, interaction) {
    const prompt = interaction.options.getString("input");

    await interaction.deferReply();

    try {
      const result = await hf.textGeneration({
        model: "google/gemma-7b-it",
        inputs: prompt,
      });

      console.log("result", result);
      if (!result.generated_text)
        return interaction.editReply(
          "An error occurred while generating text (Probably model time out)",
        );

      const continueButton = new ButtonBuilder()
        .setCustomId("continue")
        .setLabel("Continue")
        .setStyle(ButtonStyle.Primary);

      const row = new ActionRowBuilder().addComponents(continueButton);

      const generatedText = result.generated_text;

      let threadName = generatedText.substring(0, 85);
      let threadContent = generatedText.substring(85);

      if (threadContent.length > 0) {
        threadName += "...";
      }

      const embed = new EmbedBuilder()
        .setDescription(generatedText)
        .setColor("#00ff00")
        .setFooter({ text: `Generated by AI • Prompt: ${prompt}` });

      if (generatedText.length > 2000) {
        const file = new AttachmentBuilder(Buffer.from(generatedText), {
          name: "generated_text.txt",
        });

        const embed2 = new EmbedBuilder()
          .setColor("#00ff00")
          .setFooter({ text: `Generated by AI • Prompt: ${prompt}` });

        return interaction.editReply({ embeds: [embed2], files: [file] });
      }
    } catch (e) {
      console.error(e);
      await interaction.editReply(
        "An error occurred while generating text (Probably model time out)",
      );
    }
  },
};
